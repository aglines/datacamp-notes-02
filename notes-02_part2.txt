######## Dictionaries & Pandas
Learn about the dictionary, an alternative to the Python list, and the pandas DataFrame, the de facto standard to work with tabular data in Python. You will get hands-on practice with creating and manipulating datasets, and you’ll learn how to access the information you need from these data structures.

DICTIONARY
curly brackets
key and value pairs sep by colons
dict_x = {"keystring":value1, "keystring2":value2}
The key MUST be a string, no?

Dictionaries, Part 1 

Motivation for dictionaries      this is boring and stupid code yes it's bad to not have dictionaries
Create dictionary  -assemble by hand boring

#### Access dictionary 
europe = {'spain':'madrid', 'france':'paris' }
print(europe(keys))
print(europe(values))

ACCESS a VALUE, given a key
europe['france']

ACCESS a KEY, given a value
for key, value in europe.items():
    if value == 'paris':
        print(key)


DICTIONARY PRACTICE        
#### ADD a key:value pair
europe['germany'] = 'berlin'

#### DELETE a key:value pair
del(europe['spain'])

#### UPDATE a key:value pair
europe['germany'] = 'bonn'
#### zipping lists to create a dictionary
keys = ['a', 'b', 'c']
values = [1, 2, 3]
zipped = zip(keys, values)
zipped = list(zipped)
print(zipped)
data = dict(zipped)
print(data)

#### DICTIONARY METHODS
just like lists, dictionaries have methods
x = dict.keys()
x = dict.values()
x = dict.items()
x = dict.update()
x = dict.pop()
x = dict.popitem()
x = dict.clear()
x = dict.copy()
x = dict.get()
x = dict.fromkeys()
x = dict.setdefault()

dict_name.keys()
dict_name.values()
print(dict_keys)
print(dict_values)

####### Dictionaries, Part 2 
- keys must be immutable
- keys must be unique
    - so when you add a key:value pair, if the key already exists, the value will be updated
    - so when you add a key that already exists, the value will be updated
    - when you add a value that already exists, the key will be updated
values can be mutable
values can be duplicated
keys can be strings, numbers, tuples
values can be strings, numbers, lists, tuples, dictionaries

Check if a key is in a dictionary
'italy' in europe       # this gives True or False
'italy' not in europe

LIST VS DICTIONARY
list - ordered, changeable, allows duplicates
list - ordered by range of numbers
list - select, update, and remove with []
Use a list for a collection of items that need to be ordered, changeable, allow duplicates, and to select entire subsets.

dict - unordered, changeable, no duplicate (keys)
dict - select, update, and remove with []
dict - indexed by unique keys
Use a dictionary for a fast lookup table, and for items that need to be unordered, changeable, and indexed by unique keys.


Dictionary Manipulation (1) - add a key
Dictionary Manipulation (2) - del a key
Dictionariception - a dictionary of dictionaries, allowed
    to access the inner dictionary, use the outer key
    to access the inner value, use the inner key
    Use chained square brackets to select a value in the inner dictionary

#################################    Pandas, Part 1
tabular data, ie in a table
each row is an observation, ie a value, each column is a variable, i.e. a datatype, also a key
to work on these data, you CAN use 2d numpy arrays, but pandas is better  - built on numpy
DataFrame is the main data structure in pandas
DataFrame is a 2d data structure, like a 2d numpy array, with labeled axes (rows and columns)
dataframe is a dictionary of series objects
series is a 1d data structure, like a 1d numpy array, with labeled axes (rows and columns)
series is a dictionary of values

####    Build a dataframe from a dictionary manually

    # youve got a dictionary of lists called dict,
import pandas as pd
new_data = pd.DataFrame(dict)

    # pandas assigns automatic row labels, starting at 0
    # you can specify the row labels with the index argument
new_data = pd.DataFrame(dict, index = ['ab', 'cd', 'xyz'])
    # either right then or after the fact,
new_data.index = ['ab', 'cd', 'xyz']
    # same with columns
new_data = pd.DataFrame(dict, index = ['ab', 'cd', 'xyz'], columns = ['name', 'age', 'country', 'height'])
    # or after the fact
new_data.columns = ['name', 'age', 'country', 'height']

#### Import a CSV into pandas,
    # you can import a csv into a dataframe
cars = pd.read_csv('/pathname/cars.csv')

    # But maybe it reads the first column, meant to be row labels, as their own data col 
    # you can specify the row labels with the index_col argument
cars = pd.read_csv('/pathname/cars.csv', index_col = 0)



#################################    Dictionary to DataFrame (1) 
given lists, make a dictionary, then make a dataframe
dictionary has {}, then keys you pick new, values are the lists you have
pd.DataFrame(this_new_dict_you_made)

Dictionary to DataFrame (2) 
CSV to DataFrame (1) 
CSV to DataFrame (2) 
    these are all in code file basically
    just make anki flashcards from there

#################################    Pandas, Part 2 
    SQUARE BRACKETS USAGE in PANDAS

index and select data from dataframes sohär:
    - square brackets
    if you only want one column
mydataframe['country']
    If you want the country column but keep data in a DataFrame, need double square brackets
mydataframe[['country']]

    if you want multiple columns
mydataframe[['country', 'drives_right']]
    if you want rows
mydataframe[0:3]
    if you want rows and columns
mydataframe[0:3][['country', 'drives_right']]
    if you want rows and columns
mydataframe[['country', 'drives_right']][0:3]

type(mydataframe['country']) # this is a series
type(mydataframe[['country']]) # this is a dataframe
type(mydataframe[['country', 'drives_right']]) # this is a dataframe



################    LOC and ILOC
w sqr brackets, you can select rows and cols [:]
if we want same thing in pandas, we need loc and iloc
loc     - label based, Selects data based on labels
iloc    - integer position based, selects data based on position (expressed in ints)

brics.loc["RU"] # this will select only the row with label RU, a pandas 1d series
    but this will show on different lines.  for one line?
brics.loc[["RU"]] # this will select only the row with label RU, a pandas 1d dataframe
brics.loc[["RU", "IN", "CH"]] # this will select only the rows with labels RU, IN, CH, a pandas 1d dataframe
brics.loc[["RU", "IN", "CH"], ["country", "capital"]] # this will select only the rows with labels RU, IN, CH, and only the cols country and capital, a pandas 1d dataframe

brics.loc[:, ["country", "capital"]] # this will select all rows, and only the cols country and capital, a pandas 1d dataframe
brics.loc[:, "country"] # this will select all rows, and only the col country, a pandas 1d series

RECAP
Sqr brackets for access via labels or via integers
    column access
        brics['country', 'capital']
    row access only through slicing
        brics[0:3]

LOC for label-based selection, more versatile
    row access
        brics.loc['RU']
        brics.loc[['RU', 'IN', 'CH']]
    column access via slicing
        brics.loc[:, 'country']
        brics.loc[:, ['country', 'capital']]
    row and column access via nested sqr brackets
        brics.loc[['RU', 'IN', 'CH'], ['country', 'capital']]

    with loc, subsetting is lots like 2d numpy arrays
    just with loc you use row labels, not the integer positions of the element
    if you want to use integer positions, use iloc

ILOC for integer position-based selection
    row access
        brics.iloc[1]
        brics.iloc[[1, 2, 3]]
    column access
        brics.iloc[:, 1]
        brics.iloc[:, [1, 2]]
    row and column access
        brics.iloc[[1, 2, 3], [1, 2]]



brics.iloc[:, 0] # this will select all rows, and only the col country, a pandas 1d series


FILTERING
Square Brackets (1) 
Square Brackets (2) 
loc and iloc (1) 
loc and iloc (2) 
loc and iloc (3) 
ok pretty good


##### 3 Logic, Control Flow and Filtering
Boolean logic is the foundation of decision-making in Python programs. Learn about different comparison operators, how to combine them with Boolean operators, and how to use the Boolean outcomes in control structures. You'll also learn to filter data in pandas DataFrames using logic.

## Comparison - even tho diff data types usu cont compare, any numeric type CAN be compared, ie float <> int

Comparison Operators 
Equality 
Greater and less than 
Compare arrays 
Boolean Operators 

######## and, or, not (1) 
AND returns true ONLY if all items are true
AND returns false if even only one item is false
OR returns true if at least one item is true
OR returns false ONLY if all items are false
NOT returns the opposite of the boolean value


####### Boolean operators with NumPy - things are different
The truth value of an array with more than one element is ambiguous. Np clearly doesn't like an array of booleans to work on.
INSTEAD use logical_and(), logical_or(), logical_not() 
now we can works on arrays of booleans
    np.logical_and(x > 10, x < 20)
    np.logical_or(x < 10, x > 20)
    np.logical_not(x < 10, x > 20)

    np.logical_and(x > 10, x < 20, axis=0) # this will work on each column

To actually select only these bmis from the bmi array, we can use the resulting array of booleans in square brackets:
bmi[ np.logical_and( x > 10, x < 20 ) ] 
    USE METHODS a.any or a.all instead?  ( look later)

######## NOT is eval'd higher priority than AND or OR ...

########## CONDITIONALS if, elif, else 
 IF condition :
    do expression

#SYNTAX ..  IF fdfdsfsd then COLON, then newline and INDENT (4 spaces or tab) (same line?)
to exit the if, newline and NO INDENT
to continue the if, all lines indented

############## Filtering pandas DataFrames
One filter - get country areas, compare to see if  > 8m km, then use result to do appropr selectn on datafram
we want a pandas SERIES, not dtframe 

brics["area"]   # loc or iloc would work too
brics["area"] > 8    ok got right booleans
is_huge = brics["area"] > 8     # is_huge is a boolean series
finally we subselect the dataframe with the boolean series
brics[is_huge]

OR write in one line, read it logically from inside out
brics[brics["area"] > 8]

Now combine w np arrays for more xomplex filtering
brics[np.logical_and(brics["area"] > 8, brics["area"] < 10)]

np.logical_and(brics["area"] > 8)
np.logical_and(brics["area"] > 8, brics["area"] < 10)
Driving right (1) 
Driving right (2) 
Cars per capita (1) 
Cars per capita (2) 

############## 4  Loops

while loop - repeat an action until a particular condition is met

syntax like if sttmt
while condition : 
    do expression

######    for loop 
Loop over a list 
or every char in string

######## ENUMERATE, Loop AND display the index

for index, height in enumerate(xlist) :
    print("index " + str(index) + ": " + str(height))
        you must stringify heights bc theyre floats

enumerate(xlist) produces two values on each iteration: the index of the value, and the value itself
Now, on each iteration, index will contain the index, and height will contain the float.

Indexes and values (1) 
Indexes and values (2) 
Loop over list of lists 
Loop Data Structures Part 1 

########### LOOP OVER OTHER DATA Structures

### Loop over dictionary




Loop over NumPy array 
Loop Data Structures Part 2 
Loop over DataFrame (1) 
Loop over DataFrame (2) 
Add column (1) 
Add column (2) 

5
Case Study: Hacker Statistics
This chapter will allow you to apply all the concepts you've learned in this course. You will use hacker statistics to calculate your chances of winning a bet. Use random number generators, loops, and Matplotlib to gain a competitive edge!
Random Numbers 
Random float 
Roll the dice 
Determine your next move 
Random Walk 
The next step 
How low can you go? 
Visualize the walk 
Distribution 
Simulate multiple walks 
Visualize all walks 
Implement clumsiness 
Plot the distribution 
Calculate the odds


