######## Dictionaries & Pandas
Learn about the dictionary, an alternative to the Python list, and the pandas DataFrame, the de facto standard to work with tabular data in Python. You will get hands-on practice with creating and manipulating datasets, and youâ€™ll learn how to access the information you need from these data structures.

DICTIONARY
curly brackets
key and value pairs sep by colons
dict_x = {"keystring":value1, "keystring2":value2}
The key MUST be a string, no?

Dictionaries, Part 1 

Motivation for dictionaries      this is boring and stupid code yes it's bad to not have dictionaries
Create dictionary  -assemble by hand boring

#### Access dictionary 
europe = {'spain':'madrid', 'france':'paris' }
print(europe(keys))
print(europe(values))

ACCESS a VALUE, given a key
europe['france']

ACCESS a KEY, given a value
for key, value in europe.items():
    if value == 'paris':
        print(key)


DICTIONARY PRACTICE        
#### ADD a key:value pair
europe['germany'] = 'berlin'

#### DELETE a key:value pair
del(europe['spain'])

#### UPDATE a key:value pair
europe['germany'] = 'bonn'
#### zipping lists to create a dictionary
keys = ['a', 'b', 'c']
values = [1, 2, 3]
zipped = zip(keys, values)
zipped = list(zipped)
print(zipped)
data = dict(zipped)
print(data)

#### DICTIONARY METHODS
just like lists, dictionaries have methods
x = dict.keys()
x = dict.values()
x = dict.items()
x = dict.update()
x = dict.pop()
x = dict.popitem()
x = dict.clear()
x = dict.copy()
x = dict.get()
x = dict.fromkeys()
x = dict.setdefault()

dict_name.keys()
dict_name.values()
print(dict_keys)
print(dict_values)

####### Dictionaries, Part 2 
- keys must be immutable
- keys must be unique
    - so when you add a key:value pair, if the key already exists, the value will be updated
    - so when you add a key that already exists, the value will be updated
    - when you add a value that already exists, the key will be updated
values can be mutable
values can be duplicated
keys can be strings, numbers, tuples
values can be strings, numbers, lists, tuples, dictionaries

Check if a key is in a dictionary
'italy' in europe       # this gives True or False
'italy' not in europe

LIST VS DICTIONARY
list - ordered, changeable, allows duplicates
list - ordered by range of numbers
list - select, update, and remove with []
Use a list for a collection of items that need to be ordered, changeable, allow duplicates, and to select entire subsets.

dict - unordered, changeable, no duplicate (keys)
dict - select, update, and remove with []
dict - indexed by unique keys
Use a dictionary for a fast lookup table, and for items that need to be unordered, changeable, and indexed by unique keys.




Dictionary Manipulation (1) - add a key
Dictionary Manipulation (2) - del a key
Dictionariception - a dictionary of dictionaries, allowed
    to access the inner dictionary, use the outer key
    to access the inner value, use the inner key
    Use chained square brackets to select a value in the inner dict
    




Pandas, Part 1 
Dictionary to DataFrame (1) 
Dictionary to DataFrame (2) 
CSV to DataFrame (1) 
CSV to DataFrame (2) 
Pandas, Part 2 
Square Brackets (1) 
Square Brackets (2) 
loc and iloc (1) 
loc and iloc (2) 
loc and iloc (3) 

3
Logic, Control Flow and Filtering
Boolean logic is the foundation of decision-making in Python programs. Learn about different comparison operators, how to combine them with Boolean operators, and how to use the Boolean outcomes in control structures. You'll also learn to filter data in pandas DataFrames using logic.
Comparison Operators 
Equality 
Greater and less than 
Compare arrays 
Boolean Operators 
and, or, not (1) 
and, or, not (2) 
Boolean operators with NumPy 
if, elif, else 
Warmup 
if 
Add else 
Customize further: elif 
Filtering pandas DataFrames 
Driving right (1) 
Driving right (2) 
Cars per capita (1) 
Cars per capita (2) 

4
Loops
There are several techniques you can use to repeatedly execute Python code. While loops are like repeated if statements, the for loop iterates over all kinds of data structures. Learn all about them in this chapter.
while loop 
while: warming up 
Basic while loop 
Add conditionals 
for loop 
Loop over a list 
Indexes and values (1) 
Indexes and values (2) 
Loop over list of lists 
Loop Data Structures Part 1 
Loop over dictionary 
Loop over NumPy array 
Loop Data Structures Part 2 
Loop over DataFrame (1) 
Loop over DataFrame (2) 
Add column (1) 
Add column (2) 

5
Case Study: Hacker Statistics
This chapter will allow you to apply all the concepts you've learned in this course. You will use hacker statistics to calculate your chances of winning a bet. Use random number generators, loops, and Matplotlib to gain a competitive edge!
Random Numbers 
Random float 
Roll the dice 
Determine your next move 
Random Walk 
The next step 
How low can you go? 
Visualize the walk 
Distribution 
Simulate multiple walks 
Visualize all walks 
Implement clumsiness 
Plot the distribution 
Calculate the odds


